- content_for :page_header_text do
  %h3= 'Underscore'

- content_for :page_header do
  = render 'shared/page_header'

- content_for :page_body do
  .panel.panel-default
    .panel-body
      %a{href: 'http://underscorejs.org'}='Underscore'
      is a utility library for javascript. It provides most of ES5 implemented in a fast, cross-platform way as well as
      %ul
        %li
          Templates
        %li
          Functional programming support
        %li
          Object-Oriented JS support
        %li
          A huge number of other utility methods you'll probably need at some point.
      See the documentation for a full list of underscore methods, but here's a few examples of things you might want to use it for.

  .panel.panel-default
    .panel-heading
      Iteration
    .panel-body
      :kramdown
        ~~~ js
        _.each([1, 2, 3, 4], function(val, key){ console.log([key, val]) } ) // logs [0, 1] [1, 2] [2, 3] [3, 4]
        _.each({name: 'Max', age: 29, sex: 'M', occupation: 'dev'}, function(val, key){ console.log([key, val]) }) // logs ['name', 'Max'] ['age', 29] ['sex', 'M'] ['occupation', 'dev']
        ~~~

  .panel.panel-default
    .panel-heading
      Searching
    .panel-body
      :kramdown
        ~~~ js
        var array = [1, 2, 3, 4, 5, 6 ,7 , 8, 9, 10]
        console.log(_.find(array, function(x) { return x > 5 })) // logs 6
        
        console.log(_.filter(array, function(x) { return x > 5 })) // logs [6, 7, 8, 9, 10]
        // works with objects too
        console.log(_.find({x1: 1, x2: 7, prop3: 200, attribute4: -1}, function(x) { return x > 5 })) // logs 7```
        console.log(_.find({x1: 1, x2: 7, prop3: 200, attribute4: -1}, function(x) { return x > 5 })) // logs [7, 200]
        ~~~

  .panel.panel-default
    .panel-heading
      Functional Programing
    .panel-body
      :kramdown
        ~~~ js
        _.chain(5).range().shuffle().map(function(n) { return 'Item number ' + n }).each(function(n) { console.log(n) }) // logs 'Item number 1' to 'Item number 5' in a random order
        ~~~

  .panel.panel-default
    .panel-heading
      Templates
    .panel-body
      :kramdown
        ~~~ js 
        var template = _.template('Item number <%= n %>')
        _.chain(5).range().shuffle().map(function(n) { return template({n: n})}).value().each(function(n) { console.log(n) }) // another way of writing the functional example
        ~~~
      For performance reasons it's best to set arguments on the variable setting:
      :kramdown
        ~~~ js
        var template = _.template('Item number <%= data.n %>', {variable: 'data'})
        ~~~
